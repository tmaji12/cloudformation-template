AWSTemplateFormatVersion: '2010-09-09'

Description: 'NEW VPC CREATION WITH EC2 SERVERS ALONG WITH ALB AND S3 BUCKET'

Mappings:                                     # Mapping Block
  RegionMap:
    ap-south-1:
      "AMI": "ami-0af25d0df86db00c1"
    us-east-1: 
      "AMI": "ami-08e4e35cccc6189f4"

Parameters:                                   # Parameter Block
  ParaCidrBlock:                              # VPC CIDR
    Type: String
    Default : 10.0.0.0/16 

  ParaPublicSubnet1CIDR:                      # Public Subnet CIDR
    Description: Enter the IP range (CIDR notation)  for the public subnet in AZ A
    Type: String
    Default: 10.0.1.0/24

  ParaPublicSubnet2CIDR:                      # Public Subnet CIDR
    Description: Enter the IP range (CIDR notation)  for the public subnet in AZ B
    Type: String
    Default: 10.0.2.0/24

  ParaPrivateSubnet1CIDR:                     # Private Subnet CIDR
    Description: Enter the IP range (CIDR notation)  for the private subnet in AZ A
    Type: String
    Default: 10.0.100.0/24

  ParaPrivateSubnet2CIDR:                     # Private Subnet CIDR
    Description: Enter the IP range (CIDR notation)  for the private subnet in AZ B
    Type: String
    Default: 10.0.101.0/24

  InstanceType:                               # Choose Instance Type
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro,t2.small]
    ConstraintDescription: must be a valid EC2 instance type.

  KeyName:                                    # Choose KeyPair
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default : cfn_key
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  SSHLocation:                                # SSH Location
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.  

  RegionMap:                                  # Region Selection 
    Type: String
    Default: ap-south-1
    AllowedValues: [ap-south-1, us-east-1]

Resources:                                    # Resource Block
  VPC:                                        # VPC Creation
    Type: AWS::EC2::VPC
    Description: VPC CREATION
    Properties:
      CidrBlock: !Ref ParaCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-VPC" ]]
  
  InternetGateway:                            # IGW Creation
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
        - Key: Name
          Value:  !Sub ${AWS::StackName}-IGW

  AttachGateway:                              # IGW VPC attachment
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  NATGateway:                                 # NAT Gateway Creation
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value:  !Sub ${AWS::StackName}-NAT

  ElasticIPAddress:                           # EIP Allotment
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC
      Tags:
        - Key: Name
          Value:  !Sub ${AWS::StackName}-NAT-EIP
  
  PublicSubnetA:                              # Public Subnet Creation
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref ParaPublicSubnet1CIDR
      MapPublicIpOnLaunch: true 
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public-A

  PublicSubnetB:                              # Public Subnet Creation
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref ParaPublicSubnet2CIDR
      MapPublicIpOnLaunch: true 
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public-A

  PrivateSubnetA:                             # Private Subnet Creation
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref ParaPrivateSubnet1CIDR
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list 
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private-A

  PrivateSubnetB:                             # Private Subnet Creation
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref ParaPrivateSubnet2CIDR
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list 
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private-B

  PublicRouteTable:                           # Private RouteTable Creation
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value:  !Sub ${AWS::StackName}-Public-RouteTable

  PublicRoute1:                               # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRouteTable:                          # Private RouteTable Creation
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value:  !Sub ${AWS::StackName}-Private-RouteTable
  
  PrivateRoute1:                              # Private route table can access web via NAT
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0         # Route traffic through the NAT Gateway:
      NatGatewayId: !Ref NATGateway
  
  PublicSubnetARouteTableAssociation:         # SubnetAssociation
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  
  PublicSubnetBRouteTableAssociation:         # SubnetAssociation
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  
  PrivateSubnetARouteTableAssociation:        # SubnetAssociation
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetBRouteTableAssociation:        # SubnetAssociation
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable

  S3FullPolicies:                             # Managed Policy S3 full access
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: S3-Full_access
      Description: Customer managed policy for read only access to EC2 instance
      Path: '/'
      PolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 's3:*'
            Resource: !Join 
              - '' 
              - - 'arn:aws:s3:::' 
                - !Ref S3Bucket 
                - /*  # Specific S3 ARN

  IAMRole:                                    # IAM Role for EC2
    Type: AWS::IAM::Role
    Properties: 
      RoleName: SSM_Role_For_EC2
      Description: SSM role for EC2 Servers
      AssumeRolePolicyDocument: 
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - !Ref S3FullPolicies
      MaxSessionDuration: 3600

  InstanceProfile:                            # Attaching IAM Role to EC2
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: demo-ec2-instance-profile
      Path: /
      Roles: 
       - !Ref IAMRole  

  EC2Instance1:                               # New EC2 Instance
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: !Ref InstanceType
      SubnetId: !Ref PublicSubnetB
      SecurityGroupIds: 
        - !Ref Ec2SecurityGroup
      KeyName: !Ref KeyName
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-EC2-B
      IamInstanceProfile: !Ref InstanceProfile
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash
            yum install httpd -y
            service httpd start  
            echo "<html><body><h1>This message is provided to you by Region ${AWS::Region} and EC2-B <h1></body></html>" > /var/www/html/index.html

  EC2Instance2:                               # New EC2 Instance
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      SubnetId: !Ref PublicSubnetA
      InstanceType: !Ref InstanceType
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: 10
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref Ec2SecurityGroup
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-EC2-A
      IamInstanceProfile: !Ref InstanceProfile
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash
            yum install httpd -y
            service httpd start  
            echo "<html><body><h1>This message is provided to you by Region ${AWS::Region} And EC2-A <h1></body></html>" > /var/www/html/index.html

  NewVolume:                                  # New EBS Volume
    Type: AWS::EC2::Volume
    DeletionPolicy: Snapshot
    Properties:
      AvailabilityZone: !GetAtt EC2Instance1.AvailabilityZone
      Size: 2
      VolumeType: gp2
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-Volume-EC2-A

  MountPoint:                                 # Attaching EBS Volume
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref EC2Instance1
      VolumeId: !Ref NewVolume
      Device: /dev/sdh

  ALBSecurityGroup:                           # SG for ALB
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow HTTP/HTTPS and SSH inbound and outbound traffic"
      VpcId: !Ref VPC
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-ALB_SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  Ec2SecurityGroup:                           # SG for EC2
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow HTTP/HTTPS and SSH inbound and outbound traffic"
      VpcId: !Ref VPC
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref 'SSHLocation'
          
  LoadBalancer:                               # Creating Load Balancer
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    DependsOn: EC2Instance1
    Properties:
      LoadBalancerAttributes:
        - Key: 'deletion_protection.enabled'
          Value: False
        - Key: 'access_logs.s3.enabled'
          Value: False
      Name: !Sub  '${AWS::StackName}-ALB'
      Scheme: 'internet-facing'
      Subnets: 
        - !Ref 'PublicSubnetA'
        - !Ref 'PublicSubnetB'
      SecurityGroups:
        - !Ref 'ALBSecurityGroup'

  LoadBalancerListenerHTTP:                   # Creating Load Balancer Listner
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
        LoadBalancerArn: !Ref LoadBalancer
        Port: 80
        Protocol: HTTP
        DefaultActions:
            - Type: forward
              TargetGroupArn: !Ref TargetGroup

  TargetGroup:                                # Creating Target Group
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
        Name: !Sub ${AWS::StackName}-TG
        HealthCheckIntervalSeconds: 30
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 15
        HealthyThresholdCount: 5
        Matcher:
          HttpCode: '200,302'
        UnhealthyThresholdCount: 3
        TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
        VpcId: !Ref VPC
        Port: 80
        Protocol: HTTP
        Targets:
        - Id: !Ref EC2Instance1
          Port: 80
        - Id: !Ref EC2Instance2
          Port: 80

  S3Bucket:                                   # Creaing S3 Bucket
    Type: AWS::S3::Bucket
    Description: Creating Amazon S3 bucket from CloudFormation
    Properties:
      BucketName: !Sub ${AWS::StackName}-bucket-test
      VersioningConfiguration:
        Status: Enabled
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

Outputs:                                      # Output Block
  VPC:                                        # VPC Details
    Description: VPC of the base network
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPC

  PublicSubnetA:                              # Public Subnet Details
    Description: First Public Subnet
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetA

  PublicSubnetB:                              # Public Subnet Details
    Description: Second Public Subnet
    Value: !Ref PublicSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetB

  PrivateSubnetA:                             # Private Subnet Details
    Description: First Private Subnet
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetA

  PrivateSubnetB:                             # Private Subnet Details
    Description: Second Private Subnet
    Value: !Ref PrivateSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetB

  PublicIp1:                                  # Public IP 
    Description: EC2 Instance Public Ip
    Value: !GetAtt EC2Instance1.PublicIp

  PublicIp2:                                  # Public IP
    Description: EC2 Instance Public Ip
    Value: !GetAtt EC2Instance2.PublicIp

  ALBEndpoint:                                # ALB DNS Name
    Value: !GetAtt 'LoadBalancer.DNSName'
    Description: 'LoadBalancer DNS name'

  ALBName:                                    # ALB Name
    Value: !GetAtt 'LoadBalancer.LoadBalancerName'
    Description: 'Unique load balancer name'